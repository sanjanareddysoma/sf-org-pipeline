{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.8", "generated_at": "2025-08-01T06:33:44.424006Z", "invocation_id": "4a5d8c25-9699-4fd3-bc69-758cdbb7f33b", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-01T06:33:20.089574Z", "completed_at": "2025-08-01T06:33:20.111466Z"}, {"name": "execute", "started_at": "2025-08-01T06:33:20.113423Z", "completed_at": "2025-08-01T06:33:21.030086Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.1030025482177734, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01be12a9-0000-28b5-0027-cf8b0008e226"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.healthcare.src_claims", "compiled": true, "compiled_code": "with RAW_CLAIMS as (\r\n    select * from DBT_DB.RAW.RAW_CLAIMS\r\n)\r\n\r\nselect\r\n-- Add CLAIMID prefix based on patient_id\r\n    case \r\n        when Hospital_id like 'HOSP1' then 'H1-' || CLAIM_ID\r\n        when Hospital_id like 'HOSP2' then 'H2-' || CLAIM_ID\r\n        else CLAIM_ID\r\n    end as CLAIM_ID,\r\n    \r\n-- Add CLAIMID prefix based on patient_id\r\n    case \r\n        when Hospital_id like 'HOSP1' then 'H1-' || TRANSACTION_ID\r\n        when Hospital_id like 'HOSP2' then 'H2-' || TRANSACTION_ID\r\n        else TRANSACTION_ID\r\n    end as transaction_id,\r\n\r\n    case \r\n        when Hospital_ID = 'HOSP1' then replace(Patient_ID, 'HOSP1-', 'H1-')\r\n        when Hospital_ID = 'HOSP2' then replace(Patient_ID, 'HOSP1-', 'H2-')  -- assumes HOSP2 patients are still labeled with HOSP1-\r\n        else Patient_ID\r\n    end as patient_id,\r\n    \r\n    -- Add ENCOUNTERID prefix based on patient_id\r\n    case \r\n        when Hospital_id like 'HOSP1' then 'H1-' || ENCOUNTER_ID\r\n        when Hospital_id like 'HOSP2' then 'H2-' || ENCOUNTER_ID\r\n        else ENCOUNTER_ID\r\n    end as encounter_id,\r\n\r\n    -- Add PROVIDERID prefix based on patient_id\r\n    case \r\n        when Hospital_id like 'HOSP1' then 'H1-' || PROVIDER_ID\r\n        when Hospital_id like 'HOSP2' then 'H2-' || PROVIDER_ID\r\n        else PROVIDER_ID\r\n    end as provider_id,\r\n\r\n    -- Add deptID prefix based on patient_id\r\n    case \r\n        when Hospital_id like 'HOSP1' then 'H1-' || DEPT_ID\r\n        when Hospital_id like 'HOSP2' then 'H2-' || DEPT_ID\r\n        else DEPT_ID\r\n    end as dept_id,\r\n\r\n    SERVICE_DATE           AS service_date, \r\n    CLAIM_DATE            AS claim_date,\r\n    PAYOR_ID              AS payor_id,\r\n    CLAIM_AMOUNT          AS claim_amount,\r\n    PAID_AMOUNT           AS paid_amount,\r\n    CLAIM_STATUS          AS claim_status,\r\n    PAYOR_TYPE            AS payor_type,\r\n    DEDUCTIBLE         AS deductible,\r\n    COINSURANCE           AS coinsurance,\r\n    COPAY                 AS copay,\r\n    INSERT_DATE            AS insert_date,\r\n    MODIFIED_DATE          AS modified_date\r\nfrom RAW_CLAIMS", "relation_name": "DBT_DB.SILVER.src_claims"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-01T06:33:21.216694Z", "completed_at": "2025-08-01T06:33:21.237712Z"}, {"name": "execute", "started_at": "2025-08-01T06:33:21.239898Z", "completed_at": "2025-08-01T06:33:21.842825Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.7951548099517822, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01be12a9-0000-28d9-0027-cf8b00091242"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.healthcare.src_cptcodes", "compiled": true, "compiled_code": "WITH RAW_CPTCODES AS (\r\n\r\n    SELECT *\r\n    FROM DBT_DB.RAW.RAW_CPTCODES\r\n\r\n)\r\n\r\nSELECT\r\n    INDEX                       AS index,\r\n    PROCEDURE_CODE_CATEGORY     AS procedure_code_category,\r\n    CPT_CODES                   AS cpt_codes,\r\n    PROCEDURE_CODE_DESCRIPTIONS AS procedure_code_descriptions,\r\n    CODE_STATUS                 AS code_status\r\n\r\nFROM RAW_CPTCODES", "relation_name": "DBT_DB.SILVER.src_cptcodes"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-01T06:33:22.020526Z", "completed_at": "2025-08-01T06:33:22.039704Z"}, {"name": "execute", "started_at": "2025-08-01T06:33:22.041662Z", "completed_at": "2025-08-01T06:33:22.567461Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.6973187923431396, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01be12a9-0000-2906-0027-cf8b00097202"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.healthcare.src_departments", "compiled": true, "compiled_code": "with RAW_DEPARTMENTS as (\r\n    select * from DBT_DB.RAW.RAW_DEPARTMENTS\r\n)\r\nselect\r\n    \r\n    -- Add encounter prefix based on patient_id\r\n    case \r\n        when Hospital_id like 'HOSP1' then 'H1-' || DEPARTMENT_ID\r\n        when Hospital_id like 'HOSP2' then 'H2-' || DEPARTMENT_ID\r\n        else Department_id\r\n    end as department_id,\r\n    \r\n    DEPARTMENT_Name as department_name\r\nfrom RAW_DEPARTMENTS", "relation_name": "DBT_DB.SILVER.src_departments"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-01T06:33:22.731159Z", "completed_at": "2025-08-01T06:33:22.753544Z"}, {"name": "execute", "started_at": "2025-08-01T06:33:22.755619Z", "completed_at": "2025-08-01T06:33:23.546380Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.9657268524169922, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01be12a9-0000-290e-0027-cf8b0009c202"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.healthcare.src_encounters", "compiled": true, "compiled_code": "with RAW_ENCOUNTERS as (\n    select * from DBT_DB.raw.raw_encounters\n)\n\nselect\n    -- Add encounter prefix based on patient_id\n    case \n        when Provider_key like 'HOSP1-%' then 'H1-' || Encounter_ID\n        when Provider_key like 'HOSP2-%' then 'H2-' || Encounter_ID\n        else Encounter_ID\n    end as encounter_id,\n\n    -- Replace patient_id prefix\n    replace(replace(Patient_ID, 'HOSP1-', 'H1-'), 'HOSP2-', 'H2-') as patient_id,\n\n    Encounter_Date as encounter_date,\n    Encounter_Type as encounter_type,\n\n    -- Prefix provider_id based on patient hospital\n    case \n        when Provider_key like 'HOSP1-%' then 'H1-' || Provider_ID\n        when Provider_key like 'HOSP2-%' then 'H2-' || Provider_ID\n        else Provider_ID\n    end as provider_id,\n\n    -- Same logic can be applied if you need to change department_id too\n    case \n        when Provider_key like 'HOSP1-%' then 'H1-' || dept_id\n        when Provider_key like 'HOSP2-%' then 'H2-' || dept_id\n        else dept_id\n    end as dept_id,\n    \n\n    Procedure_Code as procedure_code,\n    Inserted_Date as inserted_date,\n    Modified_Date as modified_date\nfrom RAW_ENCOUNTERS", "relation_name": "DBT_DB.SILVER.src_encounters"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-01T06:33:23.708555Z", "completed_at": "2025-08-01T06:33:23.729366Z"}, {"name": "execute", "started_at": "2025-08-01T06:33:23.731260Z", "completed_at": "2025-08-01T06:33:24.375640Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.8340492248535156, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01be12a9-0000-28b5-0027-cf8b0008e22a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.healthcare.src_patients", "compiled": true, "compiled_code": "with raw_patients as (\r\n    select *\r\n    from DBT_DB.RAW.RAW_PATIENTS\r\n)\r\n\r\nselect\r\n    Patientid as patient_id,\r\n    firstname as first_name,\r\n    lastname as last_name,\r\n    middlename as middle_name,\r\n    ssn,\r\n    phonenumber as phone_number,\r\n    upper(gender) as gender,\r\n    try_to_date(dob) as date_of_birth,\r\n    address,\r\n    try_to_date(modifieddate) as modified_date\r\nfrom raw_patients", "relation_name": "DBT_DB.SILVER.src_patients"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-01T06:33:24.553757Z", "completed_at": "2025-08-01T06:33:24.574882Z"}, {"name": "execute", "started_at": "2025-08-01T06:33:24.576983Z", "completed_at": "2025-08-01T06:33:25.322341Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.9278497695922852, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01be12a9-0000-289f-0027-cf8b00095226"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.healthcare.src_providers", "compiled": true, "compiled_code": "with RAW_PROVIDERS as (\r\n    select * from DBT_DB.RAW.RAW_PROVIDERS\r\n)\r\n\r\nselect\r\n    Provider_ID as provider_id,\r\n    First_Name as first_name,\r\n    Last_Name as last_name,\r\n    Specialization as specialization,\r\n    DEPT_ID as dept_id,\r\n    NPI as npi,\r\n    \r\n    case \r\n        when split_part(DEPARTMENT_KEY, '-', 1) = 'HOSP1' then 'H1'\r\n        when split_part(DEPARTMENT_KEY, '-', 1) = 'HOSP2' then 'H2'\r\n        else 'UNKNOWN'\r\n    end as hospital_code\r\n\r\nfrom RAW_PROVIDERS", "relation_name": "DBT_DB.SILVER.src_providers"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-01T06:33:25.499140Z", "completed_at": "2025-08-01T06:33:25.523638Z"}, {"name": "execute", "started_at": "2025-08-01T06:33:25.527074Z", "completed_at": "2025-08-01T06:33:26.149823Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.8095293045043945, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01be12a9-0000-28d9-0027-cf8b00091246"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.healthcare.src_transactions", "compiled": true, "compiled_code": "with RAW_TRANSACTIONS as (\n    select * from DBT_DB.raw.raw_transactions\n)\n\nselect\n    -- Add transaction prefix based on patient_id\n    case \n        when hospitalid like 'HOSP1' then 'H1-' || TransactionID\n        when hospitalid like 'HOSP2' then 'H2-' || TransactionID\n        else TransactionID\n    end as transaction_id,\n\n    -- Add encounter prefix based on patient_id\n    case \n        when hospitalid like 'HOSP1' then 'H1-' || EncounterID\n        when hospitalid like 'HOSP2' then 'H2-' || EncounterID\n        else EncounterID\n    end as encounter_id,\n\n    case \n        when HospitalID = 'HOSP1' then replace(PatientID, 'HOSP1-', 'H1-')\n        when HospitalID = 'HOSP2' then replace(PatientID, 'HOSP1-', 'H2-')  -- assumes HOSP2 patients are still labeled with HOSP1-\n        else PatientID\n    end as patient_id,\n    -- Add provider_id prefix based on patient_id\n    case \n        when hospitalid like 'HOSP1' then 'H1-' || ProviderID\n        when hospitalid like 'HOSP2' then 'H2-' || ProviderID\n        else ProviderID\n    end as provider_id,\n\n    -- Add provider_id prefix based on patient_id\n    case \n        when hospitalid like 'HOSP1' then 'H1-' || DepartmentID\n        when hospitalid like 'HOSP2' then 'H2-' || DepartmentID\n        else DepartmentID\n    end as Department_id,\n\n\n    visitdate as visit_date,\n    serviceDate as service_date,\n    paidDate as paid_date,\n    visittype as visit_type,\n    amount as charge_amount,\n    amounttype as amount_type,\n    paidamount as paid_amount,\n\n    -- Same logic can be applied if you need to change department_id too\n    case \n        when hospitalid like 'HOSP1' then 'H1-' || claimid\n        when hospitalid like 'HOSP2' then 'H2-' || claimid\n        else claimid\n    end as claim_id,\n\n    payorid as payor_id,\n    procedurecode as procedure_code,\n    icdcode as icd_code,\n    lineofbusiness as line_of_business,\n    medicaidid as medica_id,\n    medicareid as medicare_id,\n    insertdate as inserted_date,\n    modifieddate as modified_date\n\n\nfrom RAW_TRANSACTIONS", "relation_name": "DBT_DB.SILVER.src_transactions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-01T06:33:26.326889Z", "completed_at": "2025-08-01T06:33:26.352583Z"}, {"name": "execute", "started_at": "2025-08-01T06:33:26.354008Z", "completed_at": "2025-08-01T06:33:27.636546Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.481147289276123, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01be12a9-0000-28da-0027-cf8b00092206"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.healthcare.claims_status_metrics", "compiled": true, "compiled_code": "\n\nwith base as (\n    select\n        claim_status,\n        try_to_date(claim_date) as claim_date\n    from DBT_DB.SILVER.src_claims\n    where claim_status is not null\n),\n\nagg as (\n    select\n        to_char(claim_date, 'YYYY-MM') as claim_month,\n        upper(claim_status) as claim_status,\n        count(*) as claim_count\n    from base\n    group by claim_month, claim_status\n)\n\nselect * from agg\norder by claim_month, claim_status", "relation_name": "DBT_DB.GOLD.claims_status_metrics"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-01T06:33:27.821566Z", "completed_at": "2025-08-01T06:33:27.846612Z"}, {"name": "execute", "started_at": "2025-08-01T06:33:27.848748Z", "completed_at": "2025-08-01T06:33:28.802357Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.1664271354675293, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01be12a9-0000-289f-0027-cf8b0009522a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.healthcare.dim_cptcodes", "compiled": true, "compiled_code": "\n\nWITH cleaned_cpt AS (\n    SELECT DISTINCT\n        procedure_code_category AS cpt_code,               -- numeric code\n        cpt_codes AS description             -- full text\n    FROM DBT_DB.SILVER.src_cptcodes\n    WHERE procedure_code_category IS NOT NULL\n)\n\nSELECT * FROM cleaned_cpt", "relation_name": "DBT_DB.GOLD.dim_cptcodes"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-01T06:33:29.004814Z", "completed_at": "2025-08-01T06:33:29.030213Z"}, {"name": "execute", "started_at": "2025-08-01T06:33:29.031608Z", "completed_at": "2025-08-01T06:33:30.044343Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.193467140197754, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01be12a9-0000-290e-0027-cf8b0009c206"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.healthcare.dim_departments", "compiled": true, "compiled_code": "\n\nWITH deduplicated_departments AS (\n    SELECT DISTINCT department_id, department_name\n    FROM DBT_DB.SILVER.src_departments\n)\n\nSELECT\n    department_id AS department_key,\n    INITCAP(department_name) AS department_name\nFROM deduplicated_departments", "relation_name": "DBT_DB.GOLD.dim_departments"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-01T06:33:30.212426Z", "completed_at": "2025-08-01T06:33:30.236704Z"}, {"name": "execute", "started_at": "2025-08-01T06:33:30.238393Z", "completed_at": "2025-08-01T06:33:31.446823Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.3905384540557861, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01be12a9-0000-28b5-0027-cf8b0008e22e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.healthcare.dim_patients", "compiled": true, "compiled_code": "\n\nwith base as (\n    select * \n    from DBT_DB.SILVER.src_patients\n),\n\ndeduplicated as (\n    select * \n    from base\n    qualify row_number() over (partition by patient_id order by modified_date desc) = 1\n),\n\nfinal as (\n    select\n        patient_id as patient_key,\n        first_name,\n        last_name,\n        middle_name,\n        ssn,\n        phone_number,\n        upper(gender) as gender,\n        date_of_birth,\n        address,\n        modified_date,\n\n        -- Derived: age\n        datediff('year', date_of_birth, current_date) as age,\n\n        -- Derived: age_group\n        case \n            when datediff('year', date_of_birth, current_date) < 18 then '0-17'\n            when datediff('year', date_of_birth, current_date) between 18 and 35 then '18-35'\n            when datediff('year', date_of_birth, current_date) between 36 and 60 then '36-60'\n            else '60+'\n        end as age_group,\n\n        -- Derived: gender flag\n        case \n            when upper(gender) like 'M%' then 'M'\n            when upper(gender) like 'F%' then 'F'\n            else 'U'\n        end as gender_flag\n\n    from deduplicated\n)\n\nselect * from final", "relation_name": "DBT_DB.GOLD.dim_patients"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-01T06:33:31.619232Z", "completed_at": "2025-08-01T06:33:31.640187Z"}, {"name": "execute", "started_at": "2025-08-01T06:33:31.643653Z", "completed_at": "2025-08-01T06:33:31.084758Z"}], "thread_id": "Thread-1 (worker)", "execution_time": -0.3737952709197998, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01be12a9-0000-28da-0027-cf8b0009220e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.healthcare.dim_providers", "compiled": true, "compiled_code": "\n\nWITH base AS (\n    SELECT * \n    FROM DBT_DB.SILVER.src_providers\n),\n\ndeduplicated AS (\n    SELECT *\n    FROM base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY provider_id ORDER BY npi DESC) = 1\n),\n\nfinal AS (\n    SELECT\n        provider_id,\n        INITCAP(first_name) AS first_name,\n        INITCAP(last_name) AS last_name,\n        INITCAP(specialization) AS specialization,\n        dept_id,\n        npi,\n\n        -- Derived: full name\n        CONCAT(INITCAP(first_name), ' ', INITCAP(last_name)) AS full_name\n    FROM deduplicated\n)\n\nSELECT * FROM final", "relation_name": "DBT_DB.GOLD.dim_providers"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-01T06:33:31.256119Z", "completed_at": "2025-08-01T06:33:31.274232Z"}, {"name": "execute", "started_at": "2025-08-01T06:33:31.276010Z", "completed_at": "2025-08-01T06:33:32.751773Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.6496162414550781, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01be12a9-0000-289f-0027-cf8b0009522e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.healthcare.procedure_statistics", "compiled": true, "compiled_code": "\n\n-- Step 1: Aggregate from transactions\nWITH procedure_summary AS (\n    SELECT\n        LPAD(CAST(procedure_code AS STRING), 5, '0') AS cpt_code,\n        COUNT(*) AS total_performed,\n        SUM(COALESCE(charge_amount, 0)) AS total_charges\n    FROM DBT_DB.SILVER.src_transactions\n    WHERE procedure_code IS NOT NULL\n    GROUP BY procedure_code\n),\n\n-- Step 2: Join with CPT dimension\nfinal AS (\n    SELECT\n        ps.cpt_code,\n        c.description,\n        ps.total_performed,\n        ps.total_charges,\n        ROUND(ps.total_charges / NULLIF(ps.total_performed, 0), 2) AS average_charge_per_use\n    FROM procedure_summary ps\n    LEFT JOIN DBT_DB.GOLD.dim_cptcodes c\n        ON ps.cpt_code = c.cpt_code\n)\n\nSELECT * FROM final", "relation_name": "DBT_DB.GOLD.procedure_statistics"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-01T06:33:32.926303Z", "completed_at": "2025-08-01T06:33:32.947036Z"}, {"name": "execute", "started_at": "2025-08-01T06:33:32.948680Z", "completed_at": "2025-08-01T06:33:34.271598Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.5070741176605225, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01be12a9-0000-28b5-0027-cf8b0008e232"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.healthcare.department_revenue_summary", "compiled": true, "compiled_code": "\n\n-- Step 1: Clean transaction data\nWITH txn AS (\n    SELECT\n        department_id,\n        COALESCE(CHARGE_amount, 0) AS charge_amount,\n        transaction_id\n    FROM DBT_DB.SILVER.src_transactions\n),\n\n-- Step 2: Clean claims data\nclaims AS (\n    SELECT\n        transaction_id,\n        COALESCE(paid_amount, 0) AS paid_amount\n    FROM DBT_DB.SILVER.src_claims\n),\n\n-- Step 3: Join transactions with claims and department dimension\njoined AS (\n    SELECT\n        t.department_id,\n        d.department_name,\n        t.charge_amount,\n        c.paid_amount\n    FROM txn t\n    LEFT JOIN claims c\n        ON t.transaction_id = c.transaction_id\n    LEFT JOIN DBT_DB.GOLD.dim_departments d\n        ON t.department_id = d.department_key\n),\n\n-- Step 4: Aggregate results\naggregated AS (\n    SELECT\n        department_id AS department_key,\n        department_name,\n        COUNT(*) AS total_encounters,\n        SUM(charge_amount) AS total_charges,\n        SUM(paid_amount) AS total_payments,\n        RANK() OVER (ORDER BY SUM(charge_amount) DESC) AS revenue_rank\n    FROM joined\n    GROUP BY department_id, department_name\n)\n\n-- Step 5: Output\nSELECT * FROM aggregated", "relation_name": "DBT_DB.GOLD.department_revenue_summary"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-01T06:33:34.448767Z", "completed_at": "2025-08-01T06:33:34.478114Z"}, {"name": "execute", "started_at": "2025-08-01T06:33:34.479709Z", "completed_at": "2025-08-01T06:33:35.931683Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.6437554359436035, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01be12a9-0000-28d9-0027-cf8b0009124a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.healthcare.patient_utilization_summary", "compiled": true, "compiled_code": "\n\n-- Step 1: encounter counts per patient\nWITH encounter_summary AS (\n    SELECT\n        patient_id,\n        COUNT(DISTINCT encounter_id) AS total_encounters\n    FROM DBT_DB.SILVER.src_encounters\n    GROUP BY patient_id\n),\n\n-- Step 2: transaction summary per patient\ntransaction_summary AS (\n    SELECT\n        patient_id,\n        COUNT(*) AS total_procedures,\n        SUM(COALESCE(charge_amount, 0)) AS total_charges\n    FROM DBT_DB.SILVER.src_transactions\n    GROUP BY patient_id\n),\n\n-- Step 3: combine metrics at patient level\ncombined_metrics AS (\n    SELECT\n        COALESCE(e.patient_id, t.patient_id) AS patient_id,\n        COALESCE(total_encounters, 0) AS total_encounters,\n        COALESCE(total_procedures, 0) AS total_procedures,\n        COALESCE(total_charges, 0) AS total_charges\n    FROM encounter_summary e\n    FULL OUTER JOIN transaction_summary t\n        ON e.patient_id = t.patient_id\n),\n\n-- Step 4: enrich with demographic data\nfinal AS (\n    SELECT\n        cm.patient_id,\n        p.first_name,\n        p.last_name,\n        p.gender_flag,\n        p.age,\n        p.age_group,\n        cm.total_encounters,\n        cm.total_procedures,\n        cm.total_charges\n    FROM combined_metrics cm\n    INNER JOIN DBT_DB.GOLD.dim_patients p\n        ON cm.patient_id = p.patient_key\n)\n\nSELECT * FROM final", "relation_name": "DBT_DB.GOLD.patient_utilization_summary"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-01T06:33:36.108013Z", "completed_at": "2025-08-01T06:33:36.128390Z"}, {"name": "execute", "started_at": "2025-08-01T06:33:36.130028Z", "completed_at": "2025-08-01T06:33:37.641350Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.6903376579284668, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01be12a9-0000-289f-0027-cf8b00095232"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.healthcare.ar_balance_summary", "compiled": true, "compiled_code": "\n\nwith txn as (\n    select\n        provider_id,\n        transaction_id,\n        coalesce(charge_amount, 0) as billed_amount\n    from DBT_DB.SILVER.src_transactions\n),\n\nclaims as (\n    select\n        transaction_id,\n        coalesce(paid_amount, 0) as paid_amount\n    from DBT_DB.SILVER.src_claims\n),\n\njoined as (\n    select\n        t.provider_id,\n        t.transaction_id,\n        t.billed_amount,\n        c.paid_amount\n    from txn t\n    left join claims c\n        on t.transaction_id = c.transaction_id\n),\n\naggregated as (\n    select\n        provider_id,\n        count(*) as total_transactions,\n        sum(billed_amount) as total_billed,\n        sum(paid_amount) as total_paid,\n        sum(greatest(billed_amount - paid_amount, 0)) as ar_balance\n    from joined\n    group by provider_id\n),\n\nwith_provider_details as (\n    select\n        a.provider_id,\n        p.full_name,\n        p.specialization,\n        a.total_transactions,\n        a.total_billed,\n        a.total_paid,\n        a.ar_balance\n    from aggregated a\n    left join DBT_DB.GOLD.dim_providers p\n        on a.provider_id = p.provider_id\n)\n\nselect * from with_provider_details", "relation_name": "DBT_DB.GOLD.ar_balance_summary"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-01T06:33:37.806092Z", "completed_at": "2025-08-01T06:33:37.827077Z"}, {"name": "execute", "started_at": "2025-08-01T06:33:37.829208Z", "completed_at": "2025-08-01T06:33:38.961597Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.3204362392425537, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01be12a9-0000-28d9-0027-cf8b0009124e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.healthcare.denials_by_dept_provider", "compiled": true, "compiled_code": "\n\nwith base as (\n    select\n        provider_id,\n        dept_id,\n        claim_status\n    from DBT_DB.SILVER.src_claims\n    where upper(claim_status) = 'DENIED'\n),\n\nagg as (\n    select\n        provider_id,\n        dept_id,\n        count(*) as denial_count\n    from base\n    group by provider_id, dept_id\n)\n\nselect \n    a.provider_id,\n    p.full_name,\n    p.specialization,\n    a.dept_id,\n    d.department_name,\n    a.denial_count\nfrom agg a\nleft join DBT_DB.GOLD.dim_providers p on a.provider_id = p.provider_id\nleft join DBT_DB.GOLD.dim_departments d on a.dept_id = d.department_key\norder by denial_count desc", "relation_name": "DBT_DB.GOLD.denials_by_dept_provider"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-01T06:33:39.149204Z", "completed_at": "2025-08-01T06:33:39.178158Z"}, {"name": "execute", "started_at": "2025-08-01T06:33:39.180278Z", "completed_at": "2025-08-01T06:33:40.577587Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.9599647521972656, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01be12a9-0000-290e-0027-cf8b0009c20a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.healthcare.missing_providers_audit", "compiled": true, "compiled_code": "\n\nSELECT\n    provider_id,\n    COUNT(*) AS occurrence_count,\n    'encounters' AS source_table\nFROM DBT_DB.SILVER.src_encounters\nWHERE provider_id NOT IN (SELECT provider_id FROM DBT_DB.GOLD.dim_providers)\nGROUP BY provider_id\n\nUNION ALL\n\nSELECT\n    provider_id,\n    COUNT(*) AS occurrence_count,\n    'transactions' AS source_table\nFROM DBT_DB.SILVER.src_transactions\nWHERE provider_id NOT IN (SELECT provider_id FROM DBT_DB.GOLD.dim_providers)\nGROUP BY provider_id", "relation_name": "DBT_DB.GOLD.missing_providers_audit"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-01T06:33:41.123772Z", "completed_at": "2025-08-01T06:33:41.153575Z"}, {"name": "execute", "started_at": "2025-08-01T06:33:41.155715Z", "completed_at": "2025-08-01T06:33:42.545630Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.59458589553833, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01be12a9-0000-28da-0027-cf8b00092212"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.healthcare.provider_department_revenue_summary", "compiled": true, "compiled_code": "\n\nWITH txn AS (\n    SELECT\n        provider_id,\n        department_id,\n        COALESCE(charge_amount, 0) AS charge_amount\n    FROM DBT_DB.SILVER.src_transactions\n),\n\nproviders AS (\n    SELECT\n        provider_id,\n        full_name,\n        specialization\n    FROM DBT_DB.GOLD.dim_providers\n),\n\ndepartments AS (\n    SELECT\n        department_key,\n        department_name\n    FROM DBT_DB.GOLD.dim_departments\n),\n\njoined AS (\n    SELECT\n        t.provider_id,\n        p.full_name,\n        p.specialization,\n        t.department_id,\n        d.department_name,\n        t.charge_amount\n    FROM txn t\n    LEFT JOIN providers p ON t.provider_id = p.provider_id\n    LEFT JOIN departments d ON t.department_id = d.department_key\n),\n\naggregated AS (\n    SELECT\n        provider_id,\n        full_name,\n        specialization,\n        department_id,\n        department_name,\n        SUM(charge_amount) AS total_charges,\n        COUNT(*) AS total_visits\n    FROM joined\n    GROUP BY provider_id, full_name, specialization, department_id, department_name\n)\n\nSELECT * FROM aggregated", "relation_name": "DBT_DB.GOLD.provider_department_revenue_summary"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-01T06:33:42.734075Z", "completed_at": "2025-08-01T06:33:42.753810Z"}, {"name": "execute", "started_at": "2025-08-01T06:33:42.755535Z", "completed_at": "2025-08-01T06:33:44.241581Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.6702156066894531, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01be12a9-0000-28b5-0027-cf8b0008e236"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.healthcare.provider_performance_summary", "compiled": true, "compiled_code": "\n\nWITH encounter_counts AS (\n    SELECT\n        provider_id,\n        COUNT(DISTINCT encounter_id) AS total_encounters\n    FROM DBT_DB.SILVER.src_encounters\n    GROUP BY provider_id\n),\n\ntransaction_sums AS (\n    SELECT\n        provider_id,\n        SUM(COALESCE(charge_amount, 0)) AS total_charges\n    FROM DBT_DB.SILVER.src_transactions\n    GROUP BY provider_id\n),\n\nclaims_with_providers AS (\n    SELECT\n        t.provider_id,\n        SUM(COALESCE(c.paid_amount, 0)) AS total_payments\n    FROM DBT_DB.SILVER.src_transactions t\n    LEFT JOIN DBT_DB.SILVER.src_claims c\n        ON t.transaction_id = c.transaction_id\n    GROUP BY t.provider_id\n),\n\ncombined_metrics AS (\n    SELECT\n        COALESCE(e.provider_id, t.provider_id, c.provider_id) AS provider_id,\n        COALESCE(total_encounters, 0) AS total_encounters,\n        COALESCE(total_charges, 0) AS total_charges,\n        COALESCE(total_payments, 0) AS total_payments\n    FROM encounter_counts e\n    FULL OUTER JOIN transaction_sums t ON e.provider_id = t.provider_id\n    FULL OUTER JOIN claims_with_providers c ON COALESCE(e.provider_id, t.provider_id) = c.provider_id\n),\n\nfinal AS (\n    SELECT\n        cm.provider_id,\n        p.full_name,\n        p.specialization,\n        p.dept_id,\n        cm.total_encounters,\n        cm.total_charges,\n        cm.total_payments,\n        ROUND(CASE \n            WHEN cm.total_encounters > 0 THEN cm.total_charges / cm.total_encounters\n            ELSE NULL\n        END, 2) AS avg_charge_per_encounter\n    FROM combined_metrics cm\n    INNER JOIN DBT_DB.GOLD.dim_providers p\n        ON cm.provider_id = p.provider_id\n)\n\nSELECT * FROM final", "relation_name": "DBT_DB.GOLD.provider_performance_summary"}], "elapsed_time": 27.318860292434692, "args": {"introspect": true, "project_dir": "/mnt/c/Users/sanja/OneDrive/Documents/sanjanaassignments/snowflake/sf-org-pipeline/dbt/healthcare", "printer_width": 80, "require_resource_names_without_spaces": false, "require_explicit_package_overrides_for_builtin_materializations": true, "log_file_max_bytes": 10485760, "partial_parse_file_diff": true, "populate_cache": true, "partial_parse": true, "source_freshness_run_project_hooks": false, "empty": false, "vars": {}, "write_json": true, "exclude": [], "send_anonymous_usage_stats": true, "use_colors_file": true, "static_parser": true, "cache_selected_only": false, "log_path": "/mnt/c/Users/sanja/OneDrive/Documents/sanjanaassignments/snowflake/sf-org-pipeline/dbt/healthcare/logs", "strict_mode": false, "macro_debugging": false, "which": "run", "defer": false, "profiles_dir": "/mnt/c/Users/sanja/.dbt", "favor_state": false, "version_check": true, "log_level_file": "debug", "use_colors": true, "select": [], "log_format": "default", "log_level": "info", "indirect_selection": "eager", "quiet": false, "enable_legacy_logger": false, "show_resource_report": false, "log_format_file": "debug", "warn_error_options": {"include": [], "exclude": []}, "invocation_command": "dbt run --profiles-dir /mnt/c/Users/sanja/.dbt --project-dir /mnt/c/Users/sanja/OneDrive/Documents/sanjanaassignments/snowflake/sf-org-pipeline/dbt/healthcare", "print": true}}